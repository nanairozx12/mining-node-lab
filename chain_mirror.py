"""
Chain Mirror: –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥—Ä–µ—Å–∞ ‚Äî UTXO, –±–∞–ª–∞–Ω—Å, –∏—Å—Ç–æ—Ä–∏—è.
"""

import requests
import argparse

def get_address_info(address):
    url = f"https://api.blockchair.com/bitcoin/dashboards/address/{address}"
    r = requests.get(url)
    if r.status_code != 200:
        raise Exception("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞.")
    data = r.json()["data"][address]
    return {
        "balance": data["address"]["balance"],
        "transactions": data["transactions"],
        "utxos": data["utxo"]
    }

def summarize_info(info):
    print(f"üí∞ –ë–∞–ª–∞–Ω—Å: {info['balance']} —Å–∞—Ç–æ—à–∏")
    print(f"üîÅ –ö–æ–ª-–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(info['transactions'])}")
    print(f"üì¶ UTXO:")
    for utxo in info['utxos']:
        print(f"  - {utxo['transaction_hash']}:{utxo['index']} ‚Äî {utxo['value']} —Å–∞—Ç–æ—à–∏")

def simulate_script(info):
    print("\n‚öôÔ∏è –°–∫—Ä–∏–ø—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:")
    for utxo in info['utxos']:
        print(f"add_input('{utxo['transaction_hash']}', {utxo['index']})  # {utxo['value']} —Å–∞—Ç–æ—à–∏")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Chain Mirror ‚Äî –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞.")
    parser.add_argument("address", help="Bitcoin-–∞–¥—Ä–µ—Å")
    args = parser.parse_args()
    info = get_address_info(args.address)
    summarize_info(info)
    simulate_script(info)
